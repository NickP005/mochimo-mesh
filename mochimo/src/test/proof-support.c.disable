/* testp.c  Test function from proof.c

   int sub_weight(byte *weight, byte difficulty);
   int past_weight(byte *weight, word32 lownum);

   See LICENSE.PDF

   Date: 23 November 2019
*/

#include "extlib.h"     /* general support */
#include "extmath.h"    /* 64-bit math support */

#include "../config.h"
#include "../mochimo.h"

/* #define BAIL(m) { message = m; goto bail; } */
void BAIL(int m)
{
   char buff[10];
   static int count;

   if(count) {
      printf("BAIL(%d) countdown = %d\n", m, count);
      count--;
      return;
   }
   printf("Type RETURN, count, or ctrl-c to BAIL(%d) ", m);
   fgets(buff, 10, stdin);
   if(*buff > 32) count = atoi(buff);
}

int Trace = 1;
byte Running = 1;
byte Weight[32];
byte Cblocknum[8] = { 100 };

word32 get32(void *buff)
{
   return *((word32 *) buff);
}

void put32(void *buff, word32 val)
{
   *((word32 *) buff) = val;
}

/* buff<--val */
void put64(void *buff, void *val)
{
   ((word32 *) buff)[0] = ((word32 *) val)[0];
   ((word32 *) buff)[1] = ((word32 *) val)[1];
}


/* Check if buff is all zeros */
int iszero(void *buff, int len)
{
   byte *bp;

   for(bp = buff; len; bp++, len--)
      if(*bp) return 0;

   return 1;
}


void b2hexch(byte *addr, int len, int lastchar)
{
   int n;

   for(n = 0; len; len--) {
      printf("%02x", *addr++);
      if(++n >= 36) {
         printf("\n");
         n = 0;
      }
   }
   if(lastchar)
      printf("%c", lastchar);
}

/**** TEST VERSION **** Print message to log file, Logfp, and/or stdout */
void plog(char *fmt, ...)
{
   va_list argp;

   if(fmt == NULL) return;

      va_start(argp, fmt);
      vfprintf(stdout, fmt, argp);
      va_end(argp);
      printf("\n");
/*      log_time(stdout); */
}


/***** Dummy test function
 * Return number of records read from tfile.dat.
 */
int readtf(BTRAILER *bt, word32 bnum, word32 count)
{
   byte *bp;
   word32 n, save;
   static BTRAILER bts;
   char buff[80];
   static byte d[4];

   plog("readtf() trace reading from block %u for %u trailer(s):",
        bnum, count);
/*  save = srand16fast(bnum); */
   for(bp = (byte *) bt, n = count * sizeof(BTRAILER); n; n--, bp++)
      *bp = rand16fast();
   printf("time0 [%u]: ", get32(bts.time0));
   fgets(buff, 80, stdin);
   if(*buff >= 32) put32(bt->time0, atoi(buff));
   printf("stime [%u]: ", get32(bts.stime));
   fgets(buff, 80, stdin);
   if(*buff >= 32) put32(bt->stime, atoi(buff));
   printf("difficulty [%u]: ", get32(bts.difficulty));
   fgets(buff, 80, stdin);
   d[0] = bt->difficulty[0];
   if(*buff >= 32) d[0] = atoi(buff);
   put32(bt->difficulty, get32(d));
   printf("bnum [%u]: ", get32(bts.bnum));
   fgets(buff, 80, stdin);
   if(*buff >= 32) put32(bt->bnum, atoi(buff));
   memcpy(&bts, bt, sizeof(bts));

   pdebug("readtf() read %u trailers", count);
/*   srand16fast(save); */
   return count;
}  /* end readtf() */


void add_weight(byte *weight, byte difficulty)
{
   byte temp[32];

   memset(temp, 0, 32);
   /* temp = 2**difficulty */
   temp[difficulty / 8] = 1 << (difficulty % 8);
   multi_add(weight, temp, weight, 32);
}  /* end add_weight() */


/* Reduce weight based on difficulty
 * Note: Only works above WTRIGGER31.
 */
int sub_weight(byte *weight, byte difficulty)
{
   byte temp[32];

   memset(temp, 0, 32);
   /* temp = 2**difficulty */
   temp[difficulty / 8] = 1 << (difficulty % 8);
   return multi_sub(weight, temp, weight, 32);
}  /* end sub_weight() */


/* Compute our weight at lownum and return in weight[]
 * Return VEOK on success, else error code.
 */
int past_weight(byte *weight, word32 lownum)
{
   word32 cbnum;
   int message;
   BTRAILER bts;
   char buff[10];

   plog("past_weight(weight[], %d)", lownum);  /* debug */
   printf("Enter return code 0=VEOK or 1=VERROR: ");
   fgets(buff, 10, stdin);
   if(*buff == '0') return VEOK;
   return VERROR;

   cbnum = get32(Cblocknum);
   if(lownum >= cbnum) BAIL(1);
   memcpy(weight, Weight, 32);
   for( ; cbnum > lownum; cbnum--) {
      if(readtf(&bts, cbnum, 1) != 1) BAIL(2);
      printf("Trailer difficluty: %3d  weight at block %d:\n",
             bts.difficulty[0], cbnum - 1);  /* debug */
      sub_weight(weight, bts.difficulty[0]);
      b2hexch(weight, 32, '\n');  /* debug */
   }
   return VEOK;
bail:
   memset(weight, 0, 32);
   pdebug("past_weight(): bail: %d", message);
   return message;
}  /* end past_weight() */


int memcmp2(const void *s1, const void *s2, size_t n)
{
   static int t;
   char buff[10];
   static int count;

   if(count) {
      printf("memcmp2(s1, s2, %d) countdown = %d\n", (int) n, count);
      count--;
      return 0;
   }

   printf("memcmp2((0x%x), (0x%x), %d)\n"
          "Enter count, -, 0, or +: "
          , (unsigned) s1, (unsigned) s2, (int) n);
   fgets(buff, 10, stdin);
   if(*buff == '0') return 0;
   if(*buff == '-') return -1;
   if(*buff == '+') return 1;
   count = atoi(buff);
   return 0;
}


int peach(BTRAILER *bt, word32 difficulty, word32 *hps, int mode)
{
   printf("peach((0x%x), %d)\n"
          "good (y/n)? \n", (unsigned) bt, difficulty);
/*   if(getchar() == 'y') return VEOK; */
   return VERROR;
}


char *trigg_check(byte *in, byte d, byte *bnum)
{
   printf("trigg_check((0x%x), %d, %d)\n"
          "good (y/n)? ", (unsigned) in, d, *bnum);
   if(getchar() == 'y') return "haiku";
   return NULL;
}


/* TEST VERSION
 * seconds is 32-bit signed, stime and bnum are from block trailer.
 * NOTE: hash is set to 0 for old algorithm.
 * If used and integrating into an old chain,
 * change DTRIGGER31 to a non-NG block number on which to
 * trigger new algorithm.
 */
word32 set_difficulty(word32 difficulty, int seconds, word32 stime, byte *bnum)
{
   int highsolve = 284;
   int lowsolve = 143;

   if(seconds < 0) return difficulty;
   if(seconds > highsolve) {
      if(difficulty > 0) difficulty--;
   } else if(seconds < lowsolve) {
      if(difficulty < 255) difficulty++;
   }
   return difficulty;
}

#define NTFTX (TRANLEN / sizeof(BTRAILER))

/* TEST VERSION 
 * Check the proof given from peer's tfile.dat in an OP_FOUND message.
 * Return VEOK to run syncup(), else error code to ignore peer.
 * On VEOK, splitblock is set to first block number where peer chain
 * splits from our chain.
 */
int checkproof(TX *tx, word32 *splitblock)
{
   int j, count, message;
   BTRAILER *bt, bts;
   word32 diff, stime, s, time0, now, difficulty, highblock, prevnum;
   static word32 tnum[2];
   static word32 v24trigger[2] = { V24TRIGGER, 0 };
   byte weight[32];

   /* Check preconditions for proof scan: */
   *splitblock = 0;  /* invalid syncup() block */
   if(get32(Cblocknum) < V23TRIGGER) goto allow;
   if(get32(Cblocknum+4)) goto allow;  /* if more than 4G blocks */
   if(get32(Cblocknum) <= NTFTX) goto allow;  /* not enough proof */
   highblock = get32(tx->cblock);
   if(highblock <= NTFTX) goto allow;   /* not enough proof */
   highblock = highblock - NTFTX + 1;

   /* compute our past weight at their low block in proof */
   bt = (BTRAILER *) TRANBUFF(tx);
   tnum[0] = get32(bt->bnum);
   if(past_weight(weight, tnum[0]) != VEOK) BAIL(1);
   /* first proof trailer must match us */
   count = readtf(&bts, tnum[0], 1);
   if(count != 1 || memcmp2(bt, &bts, sizeof(BTRAILER)) != 0) BAIL(2);

   /* Verify proof trailers in OP_FOUND TX. */
   now = time(NULL);
   prevnum = highblock - 1;
   bt = (BTRAILER *) TRANBUFF(tx);
   for(j = 0; j < NTFTX; j++, bt++) {
      tnum[0] = get32(bt->bnum);  /* get trailer block number */
      /* check tfile bnum sequence */
      if(tnum[0] != prevnum + 1) BAIL(3);
      prevnum = tnum[0];
      stime = get32(bt->stime);
      time0 = get32(bt->time0);
      difficulty = get32(bt->difficulty);
      if(stime <= time0) BAIL(4);  /* bad solve time sequence */
      if(stime > (now + BCONFREQ)) BAIL(5);  /* a future block is bad */
      if(j != 0 && difficulty != diff) BAIL(6);  /* bad difficulty sequence */
      printf("NG check: bt->bnum[0] = %d\n", bt->bnum[0]);  /* debug */
      if(bt->bnum[0] == 0) continue;  /* skip NG block */
      printf("before check 7 and 8 for j = %d\n", j);  /* debug */
      /* stime must increase */
      if(j != 0) {
         if(stime <= (s = get32((bt - 1)->stime))) BAIL(7);
         if(time0 != s) BAIL(8);
      }
      if(get32(bt->tcount) != 0) {
         /* bt is not a pseudoblock so check work: */
         if(cmp64(bt->bnum, v24trigger) > 0) {  /* v2.4 */
            if(peach(bt, difficulty, NULL, 1)) BAIL(9);
         } else {  /* v2.3 and prior */
            if(trigg_check(bt->mroot, difficulty, bt->bnum) == NULL) BAIL(10);
         }
      }
      add_weight(weight, difficulty);  /* tally peer's chain weight. */
      /* Compute diff = next difficulty to check next peer trailer. */
      diff = set_difficulty(difficulty, stime - time0, stime,
                            (byte *) tnum);
      if(!Running) BAIL(11);
   }  /* end for j, bt -- proof trailers check */

   if(memcmp2(weight, tx->weight, 32)) BAIL(12);  /* their weight is bad */

   /* Scan through trailer array to find where chain splits: splitblock */
   bt = (BTRAILER *) TRANBUFF(tx);
   for(j = 0; j < NTFTX; j++, bt++) {
      tnum[0] = get32(bt->bnum);
      /* get our matching trailer from local tfile.dat */
      count = readtf(&bts, tnum[0], 1);
      if(count != 1 || memcmp2(bt, &bts, sizeof(BTRAILER)) != 0) {
         /* Our trailers do not match (or end of our tfile) */
         *splitblock = tnum[0];  /* return first non-matching block number */
         break;
      }
      if(!Running) BAIL(13);
      /* trailers match -- continue scan */
   }  /* end for j, bt -- split detection */
   if(j == 0) BAIL(14);  /* never matched -- ignore peer */
   if(j >= NTFTX) BAIL(15);  /* should not happen */
allow:
   pdebug("checkproof() splitblock = 0x%x", *splitblock);
   return VEOK;  /* allow syncup() to run */
bail:
   pdebug("checkproof() ignore peer (%d)", message);
   return message;  /* ignore contention */
}  /* end checkproof() */


int main()
{
   static TX txs;
   word32 sblock;
   int status, n;
   BTRAILER *bt;
   byte *bp;

   for(bp = (byte *) &txs, n = 0; n < sizeof(TX); n++, bp++)
      *bp = rand16fast();

   bt = (BTRAILER *) TRANBUFF(&txs);
   printf("NTFTX = %d\n", (int) NTFTX);
   put32(Cblocknum, 100000);
   printf("Weight at block %u:\n", get32(Cblocknum));
   b2hexch(Weight, 32, '\n');

   put32(txs.cblock, 100025);
   put32(bt->bnum, 100025-NTFTX+1);
   status = checkproof(&txs, &sblock);
   printf("status = %d  sblock = %d\n", status, sblock);
   return 0;
}
