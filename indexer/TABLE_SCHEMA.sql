-- SQL script to initialize SQL Database for the Mochimo

-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
-- !!! INCORRECTLY EDITING THIS FILE MAY RESULT IN DATA LOSS !!!
-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

-- -- Naming Conventions:
-- All column names are lowercase and underscore separated (snake_case).
-- The "id_*" prefix is used ONLY as references to row IDs of tables.

-- -- Compatibility with non-MySQL database systems:
-- Although every attempt at a cross-database compatible script was made,
-- the differences in SQL syntax between database systems are too great.
-- MySQL, being the most recognised SQL database system, was chosen as the
-- default system for this script. For compatibility with other systems,
-- the script will require modification. See the notes below for details.

-- For compatibility with PostgreSQL (incl. any other sensible database
-- utilizing SQL standards), change AUTO_INCREMENT definitions to:
--   id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY
-- For compatibility with SQLite, change AUTO_INCREMENT definitions to:
--   id INTEGER PRIMARY KEY AUTOINCREMENT

-- -------------------------- --
-- -- Static Lookup Tables -- --
-- -------------------------- --

-- CREATE Account Types lookup table
CREATE TABLE account_types (
   id SMALLINT PRIMARY KEY,
   account_type VARCHAR(16) NOT NULL UNIQUE
);

-- CREATE Block Types lookup table
CREATE TABLE block_types (
   id SMALLINT PRIMARY KEY,
   block_type VARCHAR(16) NOT NULL UNIQUE
);

-- CREATE DSA Types lookup table
CREATE TABLE dsa_types (
   id SMALLINT PRIMARY KEY,
   dsa_type VARCHAR(16) NOT NULL UNIQUE
);

-- CREATE Status Types lookup table
CREATE TABLE status_types (
   id SMALLINT PRIMARY KEY,
   status_type VARCHAR(16) NOT NULL UNIQUE
);

-- CREATE Transaction Types lookup table
CREATE TABLE transaction_types (
   id SMALLINT PRIMARY KEY,
   transaction_type VARCHAR(16) NOT NULL UNIQUE
);

-- CREATE Transfer Types lookup table
CREATE TABLE transfer_types (
   id SMALLINT PRIMARY KEY,
   transfer_type VARCHAR(16) NOT NULL UNIQUE
);

-- Populate Account Types lookup table (as required)
INSERT INTO account_types (id, account_type)
SELECT * FROM (
   SELECT 1 as id, 'STANDARD' as account_type -- 20(tag)+20 bytes
) AS types
WHERE NOT EXISTS (
   SELECT 1 FROM account_types
   WHERE account_types.id = types.id
);

-- Populate Block Types lookup table (as required)
INSERT INTO block_types (id, block_type)
SELECT * FROM (
   SELECT 1 as id, 'GENESIS' as block_type
   UNION ALL SELECT 2, 'STANDARD'
   UNION ALL SELECT 3, 'NEOGEN'
   UNION ALL SELECT 4, 'PSEUDO'
) AS types
WHERE NOT EXISTS (
   SELECT 1 FROM block_types
   WHERE block_types.id = types.id
);

-- Populate DSA Types lookup table (as required)
INSERT INTO dsa_types (id, dsa_type)
SELECT * FROM (
   SELECT 1 as id, 'WOTS+' as dsa_type
-- UNION ALL SELECT 2, 'SPHINCS+' -- EXAMPLE ALTERATION
) AS types
WHERE NOT EXISTS (
   SELECT 1 FROM dsa_types
   WHERE dsa_types.id = types.id
);

-- Populate Status Types lookup table (as required)
INSERT INTO status_types (id, status_type)
SELECT * FROM (
   SELECT 1 as id, 'PENDING' as status_type
   UNION ALL SELECT 2, 'ACCEPTED'
   UNION ALL SELECT 3, 'SPLIT'
   UNION ALL SELECT 4, 'ORPHANED'
) AS types
WHERE NOT EXISTS (
   SELECT 1 FROM status_types
   WHERE status_types.id = types.id
);

-- Populate Transaction Types lookup table (as required)
INSERT INTO transaction_types (id, transaction_type)
SELECT * FROM (
   SELECT 1 as id, 'STANDARD' as transaction_type
   UNION ALL SELECT 2, 'MULTIDESTINATION'
-- UNION ALL SELECT 3, 'MULTISIGNATURE' -- EXAMPLE ALTERATION
) AS types
WHERE NOT EXISTS (
   SELECT 1 FROM transaction_types
   WHERE transaction_types.id = types.id
);

-- Populate transfer Types lookup table (as required)
INSERT INTO transfer_types (id, transfer_type)
SELECT * FROM (
   SELECT 1 as id, 'REWARD' as transfer_type
   UNION ALL SELECT 2, 'SOURCE'
   UNION ALL SELECT 3, 'DESTINATION'
   UNION ALL SELECT 4, 'FEE'
) AS types
WHERE NOT EXISTS (
   SELECT 1 FROM transfer_types
   WHERE transfer_types.id = types.id
);

-- !!! UPDATE IS ONLY REQUIRED FOR ALTERATIONS !!!
-- -- Update Block Types lookup table
-- UPDATE block_types
-- SET block_type = CASE id
--    WHEN 1 THEN 'GENESIS'
--    WHEN 2 THEN 'TRANSACTION' -- EXAMPLE ALTERATION
--    WHEN 3 THEN 'NEOGEN'
--    WHEN 4 THEN 'PSEUDO'
--    ELSE block_type
-- END;

-- --------------------------- --
-- -- Dynamic Lookup Tables -- --
-- --------------------------- --

-- CREATE Account data table
CREATE TABLE accounts (
   id BIGINT AUTO_INCREMENT PRIMARY KEY,
   id_type SMALLINT NOT NULL REFERENCES account_types(id),
   created_on TIMESTAMP NOT NULL, -- NO DEFAULT!!! Use block update (stime)
   modified_on TIMESTAMP, -- NO DEFAULT!!! Use block update (stime)
   account_tag VARCHAR(32) NOT NULL UNIQUE,
   balance BIGINT NOT NULL
);

-- CREATE Haiku Expansion table
CREATE TABLE haiku_expansion (
   id BIGINT AUTO_INCREMENT PRIMARY KEY,
   haiku_seed CHAR(32) NOT NULL UNIQUE,
   haiku_text VARCHAR(128) NOT NULL
);

-- ---------------------------- --
-- -- Blockchain Data Tables -- --
-- ---------------------------- --

-- CREATE Blockchain Metadata table
CREATE TABLE block_metadata (
   id BIGINT AUTO_INCREMENT PRIMARY KEY,
   id_type SMALLINT REFERENCES block_types(id),
   id_status SMALLINT NOT NULL REFERENCES status_types(id),
   id_haiku BIGINT REFERENCES haiku_expansion(id),
   created_on TIMESTAMP NOT NULL, -- NO DEFAULT!!! Must evaluate to (stime)
   block_height BIGINT, -- NO "NOT NULL" -- fkey must permit NULL
   block_hash CHAR(64) UNIQUE, -- NO "NOT NULL" -- fkey must permit NULL
   parent_hash CHAR(64),
   miner_fee BIGINT NOT NULL,
   file_size INT NOT NULL,
   entry_count INT NOT NULL, -- transaction/ledger entry count
   difficulty INT NOT NULL,
   duration INT NOT NULL, -- block time in seconds (stime - time0)
   -- ADD constraint for cascade updates on associated transactions
   CONSTRAINT blocks_id_status_ukey UNIQUE (id, id_status),
   -- ADD constraint for unique block identity (fast query by height-hash)
   CONSTRAINT blocks_height_hash_ukey UNIQUE (block_height, block_hash)
);

-- CREATE Transaction Metdata table
CREATE TABLE transaction_metadata (
   id BIGINT AUTO_INCREMENT PRIMARY KEY,
   id_type SMALLINT NOT NULL REFERENCES transaction_types(id),
   id_dsa SMALLINT NOT NULL REFERENCES dsa_types(id),
   created_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
   transaction_id CHAR(64) NOT NULL UNIQUE,
   send_total BIGINT NOT NULL,
   change_total BIGINT NOT NULL,
   fee_total BIGINT NOT NULL,
   block_to_live BIGINT NOT NULL,
   payload_count INT NOT NULL
);

-- CREATE Transaction Status table
CREATE TABLE transaction_status (
   id BIGINT AUTO_INCREMENT PRIMARY KEY,
   id_block BIGINT NOT NULL REFERENCES block_metadata(id),
   id_status SMALLINT NOT NULL REFERENCES status_types(id),
   id_transaction BIGINT NOT NULL REFERENCES transaction_metadata(id),
   file_offset INT NOT NULL,
   -- ADD Foreign Key constraint for cascading block status updates
   FOREIGN KEY (id_block, id_status)
      REFERENCES block_metadata(id, id_status)
      ON UPDATE CASCADE
);

-- CREATE Transaction Transfer table
CREATE TABLE transaction_transfer (
   id BIGINT AUTO_INCREMENT PRIMARY KEY,
   id_type SMALLINT NOT NULL REFERENCES transfer_types(id),
   id_metadata BIGINT NOT NULL REFERENCES transaction_metadata(id),
   id_account BIGINT NOT NULL REFERENCES accounts(id),
   reference VARCHAR(16),
   amount BIGINT NOT NULL
);

-- ------------------------ --
-- -- Pre-packaged Views -- --
-- ------------------------ --

CREATE VIEW blocks AS
SELECT
   block_metadata.id AS block_id,
   block_types.block_type AS block_type,
   status_types.status_type AS block_status,
   block_metadata.created_on AS created_on,
   block_metadata.block_height AS block_height,
   block_metadata.block_hash AS block_hash,
   block_metadata.parent_hash AS parent_hash,
   block_metadata.miner_fee AS miner_fee,
   block_metadata.entry_count AS entry_count,
   block_metadata.difficulty AS difficulty,
   block_metadata.duration AS duration
FROM block_metadata
JOIN block_types
   ON block_metadata.id_type = block_types.id
JOIN status_types
   ON block_metadata.id_status = status_types.id
ORDER BY block_metadata.block_height DESC;
-- -- SELECT Example...
-- SELECT * FROM blocks
-- WHERE block_type = 'STANDARD' -- any block type improves efficiency
--    AND status_type = 'ACTIVE'; -- any status type improves efficiency
-- LIMIT 10; -- ALWAYS LIMIT RESULTS!!! Improves efficiency

CREATE VIEW transfers AS
SELECT
   transaction_transfer.id AS transfer_id,
   transfer_types.transfer_type AS transfer_type,
   transaction_metadata.transaction_id AS transaction_id,
   accounts.account_tag AS account_tag,
   transaction_transfer.reference AS reference,
   transaction_transfer.amount AS amount
FROM transaction_transfer
JOIN transfer_types
   ON transaction_transfer.id_type = transfer_types.id
JOIN transaction_metadata
   ON transaction_transfer.id_metadata = transaction_metadata.id
JOIN accounts
   ON transaction_transfer.id_account = accounts.id
ORDER BY transaction_metadata.created_on DESC;